Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Material = Elm.Material.make(_elm),
   $Material$Button = Elm.Material.Button.make(_elm),
   $Material$Scheme = Elm.Material.Scheme.make(_elm),
   $Material$Textfield = Elm.Material.Textfield.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var inputs = _U.list([]);
   var map1st = F2(function (f,_p0) {    var _p1 = _p0;return {ctor: "_Tuple2",_0: f(_p1._0),_1: _p1._1};});
   var reset = function (model) {    return _U.update(model,{count: 0});};
   var increase = function (model) {    return _U.update(model,{count: model.count + 1});};
   var Upd0 = function (a) {    return {ctor: "Upd0",_0: a};};
   var MDL = function (a) {    return {ctor: "MDL",_0: a};};
   var field0 = A4($Material$Textfield.instance,0,MDL,$Material$Textfield.model,_U.list([$Material$Textfield.fwdInput(Upd0)]));
   var transferToDisabled = function (str) {    return field0.map(function (m) {    return _U.update(m,{value: str});});};
   var ResetButtonAction = function (a) {    return {ctor: "ResetButtonAction",_0: a};};
   var IncreaseButtonAction = function (a) {    return {ctor: "IncreaseButtonAction",_0: a};};
   var update = F2(function (action,model) {
      var _p2 = action;
      switch (_p2.ctor)
      {case "MDL": return A2(map1st,function (mdl$) {    return _U.update(model,{mdl: mdl$});},A3($Material.update,MDL,_p2._0,model.mdl));
         case "IncreaseButtonAction": var _p5 = _p2._0;
           var model$ = function () {    var _p3 = _p5;if (_p3.ctor === "Click") {    return increase(model);} else {    return model;}}();
           var _p4 = A2($Material$Button.update,_p5,model.increaseButtonModel);
           var submodel = _p4._0;
           var fx = _p4._1;
           return {ctor: "_Tuple2",_0: _U.update(model$,{increaseButtonModel: submodel}),_1: A2($Effects.map,IncreaseButtonAction,fx)};
         case "ResetButtonAction": var _p8 = _p2._0;
           var model$ = function () {    var _p6 = _p8;if (_p6.ctor === "Click") {    return reset(model);} else {    return model;}}();
           var _p7 = A2($Material$Button.update,_p8,model.resetButtonModel);
           var submodel = _p7._0;
           var fx = _p7._1;
           return {ctor: "_Tuple2",_0: _U.update(model$,{resetButtonModel: submodel}),_1: A2($Effects.map,ResetButtonAction,fx)};
         default: var model$ = _U.update(model,{mdl: A2(transferToDisabled,_p2._0,model.mdl)});
           return {ctor: "_Tuple2",_0: model$,_1: $Effects.none};}
   });
   var view = F2(function (addr,model) {
      return $Material$Scheme.top(A2($Html.div,
      _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "margin",_1: "auto"}
                                              ,{ctor: "_Tuple2",_0: "padding-left",_1: "5%"}
                                              ,{ctor: "_Tuple2",_0: "padding-right",_1: "5%"}]))]),
      _U.list([$Html.text(A2($Basics._op["++"],"Current count: ",$Basics.toString(model.count)))
              ,A4($Material$Button.flat,A2($Signal.forwardTo,addr,IncreaseButtonAction),model.increaseButtonModel,_U.list([]),_U.list([$Html.text("Increase")]))
              ,A4($Material$Button.flat,A2($Signal.forwardTo,addr,ResetButtonAction),model.resetButtonModel,_U.list([]),_U.list([$Html.text("Reset")]))
              ,A3(field0.view,addr,model.mdl,_U.list([]))])));
   });
   var model = {count: 0,increaseButtonModel: $Material$Button.model(true),resetButtonModel: $Material$Button.model(false),mdl: $Material.model};
   var init = {ctor: "_Tuple2",_0: model,_1: $Effects.none};
   var app = $StartApp.start({init: init,view: view,update: update,inputs: inputs});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   var Model = F4(function (a,b,c,d) {    return {count: a,increaseButtonModel: b,resetButtonModel: c,mdl: d};});
   return _elm.Main.values = {_op: _op
                             ,Model: Model
                             ,model: model
                             ,IncreaseButtonAction: IncreaseButtonAction
                             ,ResetButtonAction: ResetButtonAction
                             ,MDL: MDL
                             ,Upd0: Upd0
                             ,increase: increase
                             ,reset: reset
                             ,map1st: map1st
                             ,update: update
                             ,transferToDisabled: transferToDisabled
                             ,field0: field0
                             ,view: view
                             ,init: init
                             ,inputs: inputs
                             ,app: app
                             ,main: main};
};