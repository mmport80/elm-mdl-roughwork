Elm.Material = Elm.Material || {};
Elm.Material.Layout = Elm.Material.Layout || {};
Elm.Material.Layout.make = function (_elm) {
   "use strict";
   _elm.Material = _elm.Material || {};
   _elm.Material.Layout = _elm.Material.Layout || {};
   if (_elm.Material.Layout.values) return _elm.Material.Layout.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $DOM = Elm.DOM.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Material$Helpers = Elm.Material.Helpers.make(_elm),
   $Material$Icon = Elm.Material.Icon.make(_elm),
   $Material$Ripple = Elm.Material.Ripple.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var Contents = F4(function (a,b,c,d) {    return {header: a,drawer: b,tabs: c,main: d};});
   var drawerView = F3(function (addr,model,elems) {
      return A2($Html.div,
      _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "mdl-layout__drawer",_1: true}
                                                  ,{ctor: "_Tuple2",_0: "is-visible",_1: model.isDrawerOpen}]))]),
      elems);
   });
   var toList = function (x) {    var _p0 = x;if (_p0.ctor === "Nothing") {    return _U.list([]);} else {    return _U.list([_p0._0]);}};
   var isWaterfall = function (mode) {    var _p1 = mode;if (_p1.ctor === "Waterfall") {    return true;} else {    return false;}};
   var Waterfall = function (a) {    return {ctor: "Waterfall",_0: a};};
   var Scroll = {ctor: "Scroll"};
   var Seamed = {ctor: "Seamed"};
   var Standard = {ctor: "Standard"};
   var row = $Html.div(_U.list([$Html$Attributes.$class("mdl-layout__header-row")]));
   var link = F2(function (attrs,contents) {    return A2($Html.a,A2($List._op["::"],$Html$Attributes.$class("mdl-navigation__link"),attrs),contents);});
   var navigation = function (contents) {    return A2($Html.nav,_U.list([$Html$Attributes.$class("mdl-navigation")]),contents);};
   var title = function (t) {    return A2($Html.span,_U.list([$Html$Attributes.$class("mdl-layout__title")]),_U.list([$Html.text(t)]));};
   var spacer = A2($Html.div,_U.list([$Html$Attributes.$class("mdl-layout-spacer")]),_U.list([]));
   var Ripple = F2(function (a,b) {    return {ctor: "Ripple",_0: a,_1: b};});
   var TransitionEnd = {ctor: "TransitionEnd"};
   var TransitionHeader = function (a) {    return {ctor: "TransitionHeader",_0: a};};
   var ScrollTab = function (a) {    return {ctor: "ScrollTab",_0: a};};
   var SmallScreen = function (a) {    return {ctor: "SmallScreen",_0: a};};
   var ToggleDrawer = {ctor: "ToggleDrawer"};
   var drawerButton = function (addr) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("mdl-layout__drawer-button"),A2($Html$Events.onClick,addr,ToggleDrawer)]),
      _U.list([$Material$Icon.i("menu")]));
   };
   var obfuscator = F2(function (addr,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "mdl-layout__obfuscator",_1: true}
                                                  ,{ctor: "_Tuple2",_0: "is-visible",_1: model.isDrawerOpen}]))
              ,A2($Html$Events.onClick,addr,ToggleDrawer)]),
      _U.list([]));
   });
   var SwitchTab = function (a) {    return {ctor: "SwitchTab",_0: a};};
   var Model = F8(function (a,b,c,d,e,f,g,h) {
      return {selectedTab: a,isDrawerOpen: b,fixedHeader: c,fixedDrawer: d,fixedTabs: e,rippleTabs: f,mode: g,state: h};
   });
   var s = function (model) {    var _p2 = model.state;return _p2._0;};
   var tabsView = F3(function (addr,model,tabs) {
      var chevron = F2(function (direction,offset) {
         return A2($Html.div,
         _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "mdl-layout__tab-bar-button",_1: true}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: A2($Basics._op["++"],"mdl-layout__tab-bar-",A2($Basics._op["++"],direction,"-button"))
                                                      ,_1: true}]))]),
         _U.list([A3($Material$Icon.view,
         A2($Basics._op["++"],"chevron_",direction),
         _U.list([$Material$Icon.size24]),
         _U.list([A2($Html$Events.onClick,addr,ScrollTab(offset))]))]));
      });
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("mdl-layout__tab-bar-container")]),
      _U.list([A2(chevron,"left",-100)
              ,A2($Html.div,
              _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "mdl-layout__tab-bar",_1: true}
                                                          ,{ctor: "_Tuple2",_0: "mdl-js-ripple-effect",_1: model.rippleTabs}
                                                          ,{ctor: "_Tuple2",_0: "mds-js-ripple-effect--ignore-events",_1: model.rippleTabs}
                                                          ,{ctor: "_Tuple2",_0: "is-casting-shadow",_1: _U.eq(model.mode,Standard)}]))]),
              A2($List.indexedMap,
              F2(function (tabIndex,tab) {
                 return A3($Material$Helpers.filter,
                 $Html.a,
                 _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "mdl-layout__tab",_1: true}
                                                             ,{ctor: "_Tuple2",_0: "is-active",_1: _U.eq(tabIndex,model.selectedTab)}]))
                         ,A2($Html$Events.onClick,addr,SwitchTab(tabIndex))]),
                 _U.list([$Maybe.Just(tab)
                         ,model.rippleTabs ? A2($Maybe.map,
                         A2($Material$Ripple.view,
                         A2($Signal.forwardTo,addr,Ripple(tabIndex)),
                         _U.list([$Html$Attributes.$class("mdl-layout__tab-ripple-container")])),
                         A2($Array.get,tabIndex,s(model).tabs)) : $Maybe.Nothing]));
              }),
              tabs))
              ,A2(chevron,"right",100)]));
   });
   var headerView = F3(function (addr,model,_p3) {
      var _p4 = _p3;
      var mode = function () {
         var _p5 = model.mode;
         switch (_p5.ctor)
         {case "Standard": return "";
            case "Scroll": return "mdl-layout__header--scroll";
            case "Seamed": return "mdl-layout__header--seamed";
            default: if (_p5._0 === true) {
                    return "mdl-layout__header--waterfall mdl-layout__header--waterfall-hide-top";
                 } else {
                    return "mdl-layout__header--waterfall";
                 }}
      }();
      var _p6 = A2($Debug.log,"foo",model.state);
      return A2($Html.header,
      A2($List.append,
      isWaterfall(model.mode) ? _U.list([A2($Html$Events.onClick,addr,TransitionHeader(false))]) : _U.list([]),
      _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "mdl-layout__header",_1: true}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: "is-casting-shadow"
                                                   ,_1: _U.eq(model.mode,Standard) || isWaterfall(model.mode) && s(model).isCompact}
                                                  ,{ctor: "_Tuple2",_0: "is-animating",_1: s(model).isAnimating}
                                                  ,{ctor: "_Tuple2",_0: "is-compact",_1: s(model).isCompact}
                                                  ,{ctor: "_Tuple2",_0: mode,_1: !_U.eq(mode,"")}]))])),
      A2($List.concatMap,function (x) {    return x;},_U.list([toList(_p4._0),_p4._1,toList(_p4._2)])));
   });
   var S = function (a) {    return {ctor: "S",_0: a};};
   var initState = function (no_tabs) {
      return S({tabs: A2($Array.repeat,no_tabs,$Material$Ripple.model),isSmallScreen: false,isCompact: false,isAnimating: false});
   };
   var defaultLayoutModel = {selectedTab: 0
                            ,isDrawerOpen: false
                            ,fixedHeader: true
                            ,fixedDrawer: false
                            ,fixedTabs: false
                            ,rippleTabs: true
                            ,mode: Standard
                            ,state: initState(0)};
   var update = F2(function (action,model) {
      var _p7 = model.state;
      var state = _p7._0;
      var _p8 = action;
      switch (_p8.ctor)
      {case "SmallScreen": var _p9 = _p8._0;
           return $Material$Helpers.pure(_U.update(model,
           {state: S(_U.update(state,{isSmallScreen: _p9})),isDrawerOpen: $Basics.not(_p9) && model.isDrawerOpen}));
         case "SwitchTab": return $Material$Helpers.pure(_U.update(model,{selectedTab: _p8._0}));
         case "ToggleDrawer": return $Material$Helpers.pure(_U.update(model,{isDrawerOpen: $Basics.not(model.isDrawerOpen)}));
         case "Ripple": var _p13 = _p8._0;
           var _p10 = A2($Maybe.withDefault,
           $Material$Helpers.pure(state),
           A2($Maybe.map,
           function (_p11) {
              var _p12 = _p11;
              return {ctor: "_Tuple2",_0: _U.update(state,{tabs: A3($Array.set,_p13,_p12._0,s(model).tabs)}),_1: A2($Effects.map,Ripple(_p13),_p12._1)};
           },
           A2($Maybe.map,$Material$Ripple.update(_p8._1),A2($Array.get,_p13,s(model).tabs))));
           var state$ = _p10._0;
           var effect = _p10._1;
           return {ctor: "_Tuple2",_0: _U.update(model,{state: S(state$)}),_1: effect};
         case "ScrollTab": return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "TransitionHeader": var headerVisible = $Basics.not(state.isSmallScreen) || model.fixedHeader;
           var state$ = _U.update(state,{isCompact: _p8._0,isAnimating: headerVisible});
           return $Basics.not(state.isAnimating) ? {ctor: "_Tuple2"
                                                   ,_0: _U.update(model,{state: S(state$)})
                                                   ,_1: A2($Material$Helpers.delay,200,TransitionEnd)} : {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         default: return {ctor: "_Tuple2",_0: _U.update(model,{state: S(_U.update(state,{isAnimating: false}))}),_1: $Effects.none};}
   });
   var State$ = F4(function (a,b,c,d) {    return {tabs: a,isSmallScreen: b,isCompact: c,isAnimating: d};});
   var scrollMailbox = $Signal.mailbox(0.0);
   var setupSignals = function (f) {
      return $Signal.mergeMany(_U.list([A2($Signal.map,
                                       function (_p14) {
                                          return f(SmallScreen(_p14));
                                       },
                                       $Signal.dropRepeats(A2($Signal.map,F2(function (x,y) {    return _U.cmp(x,y) > 0;})(1024),$Window.width)))
                                       ,A2($Signal.map,
                                       function (_p15) {
                                          return f(TransitionHeader(_p15));
                                       },
                                       $Signal.dropRepeats(A2($Signal.map,F2(function (x,y) {    return _U.cmp(x,y) < 0;})(0.0),scrollMailbox.signal)))]));
   };
   var view = F3(function (addr,model,_p16) {
      var _p17 = _p16;
      var _p22 = _p17.tabs;
      var _p21 = _p17.header;
      var _p20 = _p17.drawer;
      var tabsElems = $List.isEmpty(_p22) ? $Maybe.Nothing : $Maybe.Just(A3(tabsView,addr,model,_p22));
      var hasHeader = $Basics.not($List.isEmpty(_p22) && $List.isEmpty(_p21));
      var _p18 = function () {
         var _p19 = {ctor: "_Tuple3",_0: _p20,_1: _p21,_2: model.fixedHeader};
         if (_p19.ctor === "_Tuple3" && _p19._0.ctor === "::") {
               if (_p19._1.ctor === "::" && _p19._2 === true) {
                     return {ctor: "_Tuple2",_0: $Maybe.Nothing,_1: $Maybe.Just(drawerButton(addr))};
                  } else {
                     return {ctor: "_Tuple2",_0: $Maybe.Just(drawerButton(addr)),_1: $Maybe.Nothing};
                  }
            } else {
               return {ctor: "_Tuple2",_0: $Maybe.Nothing,_1: $Maybe.Nothing};
            }
      }();
      var contentDrawerButton = _p18._0;
      var headerDrawerButton = _p18._1;
      return A2($Html.div,
      _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "mdl-layout__container",_1: true}
                                                  ,{ctor: "_Tuple2",_0: "has-scrolling-header",_1: _U.eq(model.mode,Scroll)}]))]),
      _U.list([A3($Material$Helpers.filter,
      $Html.div,
      _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "mdl-layout ",_1: true}
                                                  ,{ctor: "_Tuple2",_0: "is-upgraded",_1: true}
                                                  ,{ctor: "_Tuple2",_0: "is-small-screen",_1: s(model).isSmallScreen}
                                                  ,{ctor: "_Tuple2",_0: "has-drawer",_1: !_U.eq(_p20,_U.list([]))}
                                                  ,{ctor: "_Tuple2",_0: "has-tabs",_1: !_U.eq(_p22,_U.list([]))}
                                                  ,{ctor: "_Tuple2",_0: "mdl-js-layout",_1: true}
                                                  ,{ctor: "_Tuple2",_0: "mdl-layout--fixed-drawer",_1: model.fixedDrawer && !_U.eq(_p20,_U.list([]))}
                                                  ,{ctor: "_Tuple2",_0: "mdl-layout--fixed-header",_1: model.fixedHeader && hasHeader}
                                                  ,{ctor: "_Tuple2",_0: "mdl-layout--fixed-tabs",_1: model.fixedTabs && !_U.eq(_p22,_U.list([]))}]))]),
      _U.list([hasHeader ? $Maybe.Just(A3(headerView,addr,model,{ctor: "_Tuple3",_0: headerDrawerButton,_1: _p21,_2: tabsElems})) : $Maybe.Nothing
              ,$List.isEmpty(_p20) ? $Maybe.Nothing : $Maybe.Just(A2(obfuscator,addr,model))
              ,$List.isEmpty(_p20) ? $Maybe.Nothing : $Maybe.Just(A3(drawerView,addr,model,_p20))
              ,contentDrawerButton
              ,$Maybe.Just(A2($Html.main$,
              A2($List._op["::"],
              $Html$Attributes.$class("mdl-layout__content"),
              A2($List._op["::"],
              $Html$Attributes.key(A2($Basics._op["++"],"elm-mdl-layout-",$Basics.toString(model.selectedTab))),
              isWaterfall(model.mode) ? _U.list([A3($Html$Events.on,
              "scroll",
              $DOM.target($DOM.scrollTop),
              $Signal.message(scrollMailbox.address))]) : _U.list([]))),
              _p17.main))]))]));
   });
   return _elm.Material.Layout.values = {_op: _op
                                        ,setupSignals: setupSignals
                                        ,defaultLayoutModel: defaultLayoutModel
                                        ,initState: initState
                                        ,update: update
                                        ,row: row
                                        ,spacer: spacer
                                        ,title: title
                                        ,navigation: navigation
                                        ,link: link
                                        ,view: view
                                        ,Model: Model
                                        ,Contents: Contents
                                        ,Standard: Standard
                                        ,Seamed: Seamed
                                        ,Scroll: Scroll
                                        ,Waterfall: Waterfall
                                        ,SwitchTab: SwitchTab
                                        ,ToggleDrawer: ToggleDrawer};
};