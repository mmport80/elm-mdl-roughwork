Elm.Material = Elm.Material || {};
Elm.Material.Snackbar = Elm.Material.Snackbar || {};
Elm.Material.Snackbar.make = function (_elm) {
   "use strict";
   _elm.Material = _elm.Material || {};
   _elm.Material.Snackbar = _elm.Material.Snackbar || {};
   if (_elm.Material.Snackbar.values) return _elm.Material.Snackbar.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Material$Helpers = Elm.Material.Helpers.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var Move = F2(function (a,b) {    return {ctor: "Move",_0: a,_1: b};});
   var Click = function (a) {    return {ctor: "Click",_0: a};};
   var End = function (a) {    return {ctor: "End",_0: a};};
   var Begin = function (a) {    return {ctor: "Begin",_0: a};};
   var enqueue = F2(function (contents,model) {    return _U.update(model,{queue: A2($List.append,model.queue,_U.list([contents]))});});
   var next = function (model) {    return $Effects.map(Move(model.seq));};
   var forward = function (_p0) {    return $Effects.task($Task.succeed(_p0));};
   var Clicked = {ctor: "Clicked"};
   var view = F2(function (addr,model) {
      var isActive = function () {    var _p1 = model.state;switch (_p1.ctor) {case "Inert": return false;case "Active": return true;default: return false;}}();
      var contents = function () {
         var _p2 = model.state;
         switch (_p2.ctor)
         {case "Inert": return $Maybe.Nothing;
            case "Active": return $Maybe.Just(_p2._0);
            default: return $Maybe.Just(_p2._0);}
      }();
      return A2($Html.div,
      _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "mdl-js-snackbar",_1: true}
                                                  ,{ctor: "_Tuple2",_0: "mdl-snackbar",_1: true}
                                                  ,{ctor: "_Tuple2",_0: "mdl-snackbar--active",_1: isActive}]))]),
      _U.list([A2($Html.div,
              _U.list([$Html$Attributes.$class("mdl-snackbar__text")]),
              A2($Maybe.withDefault,_U.list([]),A2($Maybe.map,function (c) {    return _U.list([$Html.text(c.message)]);},contents)))
              ,A2($Html.button,
              A2($List._op["::"],
              $Html$Attributes.$class("mdl-snackbar__action"),
              A2($List._op["::"],
              $Html$Attributes.type$("button"),
              A2($Maybe.withDefault,
              _U.list([]),
              A2($Maybe.map,
              $Basics.always(_U.list([A2($Html$Events.onClick,addr,A2(Move,model.seq,Clicked))])),
              A3($Basics.flip,$Maybe.andThen,function (_) {    return _.action;},contents))))),
              A2($Maybe.withDefault,
              _U.list([]),
              A2($Maybe.map,
              function (action) {
                 return _U.list([$Html.text(action)]);
              },
              A3($Basics.flip,$Maybe.andThen,function (_) {    return _.action;},contents))))]));
   });
   var Timeout = {ctor: "Timeout"};
   var Fading = function (a) {    return {ctor: "Fading",_0: a};};
   var Active = function (a) {    return {ctor: "Active",_0: a};};
   var tryDequeue = function (model) {
      var _p3 = {ctor: "_Tuple2",_0: model.state,_1: model.queue};
      if (_p3.ctor === "_Tuple2" && _p3._0.ctor === "Inert" && _p3._1.ctor === "::") {
            var _p4 = _p3._1._0;
            return {ctor: "_Tuple2"
                   ,_0: _U.update(model,{state: Active(_p4),queue: _p3._1._1,seq: model.seq + 1})
                   ,_1: $Effects.batch(_U.list([A2($Effects.map,Move(model.seq + 1),A2($Material$Helpers.delay,_p4.timeout,Timeout))
                                               ,forward(Begin(_p4.payload))]))};
         } else {
            return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         }
   };
   var add = F2(function (contents,model) {    return tryDequeue(A2(enqueue,contents,model));});
   var Inert = {ctor: "Inert"};
   var move = F2(function (transition,model) {
      var _p5 = {ctor: "_Tuple2",_0: model.state,_1: transition};
      _v3_4: do {
         if (_p5.ctor === "_Tuple2") {
               if (_p5._1.ctor === "Clicked") {
                     if (_p5._0.ctor === "Active") {
                           var _p6 = _p5._0._0;
                           return {ctor: "_Tuple2"
                                  ,_0: _U.update(model,{state: Fading(_p6)})
                                  ,_1: $Effects.batch(_U.list([A2(next,model,A2($Material$Helpers.delay,_p6.fade,Timeout)),forward(Click(_p6.payload))]))};
                        } else {
                           break _v3_4;
                        }
                  } else {
                     switch (_p5._0.ctor)
                     {case "Inert": return tryDequeue(model);
                        case "Active": var _p7 = _p5._0._0;
                          return {ctor: "_Tuple2"
                                 ,_0: _U.update(model,{state: Fading(_p7)})
                                 ,_1: $Effects.batch(_U.list([A2(next,model,A2($Material$Helpers.delay,_p7.fade,Timeout)),forward(Begin(_p7.payload))]))};
                        default: return {ctor: "_Tuple2"
                                        ,_0: _U.update(model,{state: Inert})
                                        ,_1: $Effects.batch(_U.list([A2(next,model,$Effects.tick($Basics.always(Timeout))),forward(End(_p5._0._0.payload))]))};}
                  }
            } else {
               break _v3_4;
            }
      } while (false);
      return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
   });
   var update = F2(function (action,model) {
      var _p8 = action;
      if (_p8.ctor === "Move") {
            return _U.eq(_p8._0,model.seq) ? A2(move,_p8._1,model) : {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         } else {
            return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         }
   });
   var snackbar = F3(function (payload,message,label) {    return {message: message,action: $Maybe.Just(label),payload: payload,timeout: 2750,fade: 250};});
   var toast = F2(function (payload,message) {    return {message: message,action: $Maybe.Nothing,payload: payload,timeout: 2750,fade: 250};});
   var model = {queue: _U.list([]),state: Inert,seq: 0};
   var Model = F3(function (a,b,c) {    return {queue: a,state: b,seq: c};});
   var Contents = F5(function (a,b,c,d,e) {    return {message: a,action: b,payload: c,timeout: d,fade: e};});
   return _elm.Material.Snackbar.values = {_op: _op
                                          ,add: add
                                          ,model: model
                                          ,toast: toast
                                          ,snackbar: snackbar
                                          ,update: update
                                          ,view: view
                                          ,Contents: Contents
                                          ,Model: Model
                                          ,Begin: Begin
                                          ,End: End
                                          ,Click: Click};
};